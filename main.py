"""–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç."""
import email
import imaplib
import logging
import os
import threading
import time
from datetime import datetime
from email.header import decode_header

from bs4 import BeautifulSoup
from dotenv import load_dotenv
from telebot import TeleBot, types

load_dotenv()
logging.basicConfig(
    filename='main.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,
)

MY_TELEGRAM_ID = int(os.getenv('MY_TELEGRAM_ID'))
INTERVAL = int(os.getenv('INTERVAL'))
SLEEP = int(os.getenv('SLEEP'))
MAIL_PASS = os.getenv('MAIL_PASS')
MAIL_USER = os.getenv('MAIL_USER')
MAIL_SERVICE = os.getenv('MAIL_SERVICE')

bot = TeleBot(os.getenv('BOT_TOKEN'))
seen_uid_list = []


def imap_connect():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å IMAP-—Å–µ—Ä–≤–µ—Ä–æ–º –∏ –≤—ã–±–∏—Ä–∞–µ—Ç INBOX."""
    logging.debug('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å IMAP-—Å–µ—Ä–≤–µ—Ä–æ–º.')
    imap = imaplib.IMAP4_SSL(MAIL_SERVICE)
    imap.login(MAIL_USER, MAIL_PASS)
    imap.select('INBOX')
    logging.debug('–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å IMAP-—Å–µ—Ä–≤–µ—Ä–æ–º.')
    return imap


def is_valid_id(chat_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."""
    if chat_id != MY_TELEGRAM_ID:
        logging.debug(
            f'–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞, —é–∑–µ—Ä {chat_id} –ø—ã—Ç–∞–ª—Å—è –≤–æ—Å–±–æ–ª—å–∑–æ–≤—Ç—å—Å—è –±–æ—Ç–æ–º.'
        )
        send_message(chat_id, f'–¢–≤–æ–π id - {chat_id}. –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')
        return False
    return True


def send_message(chat_id, message, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–µ–ª–µ–≥—Ä–∞–º."""
    logging.debug('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–ì')
    try:
        bot.send_message(
            chat_id=chat_id,
            text=message,
            reply_markup=reply_markup
        )
        logging.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¢–ì')
    except Exception as error:
        logging.error(
            f'–°–±–æ–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–ì: {error}',
            exc_info=True
        )


def get_uid_list(imap):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ UID –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º."""
    logging.debug('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ UID')
    response = imap.uid('search', 'UNSEEN', 'ALL')
    if response[0] == 'OK':
        return response[1][0].decode().split()
    return []


def convert_text(msg):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    logging.debug('–ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    for part in msg.walk():
        content_type = part.get_content_type()
        if content_type == 'text/plain' or content_type == 'text/html':
            payload = part.get_payload(decode=True)
            charset = part.get_content_charset() or 'utf-8'
            if payload:
                text = payload.decode(charset, errors='ignore')
                soup = BeautifulSoup(text, 'lxml')
                clean_text = soup.get_text(separator='\n', strip=True)
    logging.debug('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ.')
    return clean_text


def read_email_message(uid, imap, header_only=False):
    """–ß—Ç–µ–Ω–∏–µ –ø–∏—Å—å–º–∞."""
    logging.debug('–ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∏—Å—å–º–∞.')
    fetch_mode = '(RFC822)'
    if header_only:
        fetch_mode = '(BODY.PEEK[HEADER])'
    res, msg = imap.uid('fetch', uid, fetch_mode)
    if res != 'OK':
        return f'–ù–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}'
    msg = email.message_from_bytes(msg[0][1])
    raw_from = msg['From']
    decoded_from, encoding = decode_header(raw_from)[0]
    if isinstance(decoded_from, bytes):
        decoded_from = decoded_from.decode(encoding or 'utf-8')
    sender_name, sender_email = email.utils.parseaddr(decoded_from)
    letter_from = (
        f'{sender_name} <{sender_email}>'
        if sender_name else sender_email
    )
    letter_title, encoding = decode_header(msg['Subject'])[0]
    if isinstance(letter_title, bytes):
        letter_title = letter_title.decode(encoding or 'utf-8')
    message = f'üìß –¢–µ–º–∞ –ø–∏—Å—å–º–∞: {letter_title} \n'
    message += f'üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {letter_from} \n'
    if not header_only:
        letter_date_tuple = email.utils.parsedate_tz(msg['Date'])
        if letter_date_tuple:
            dt = datetime(*letter_date_tuple[:6])
            letter_date = dt.strftime('%d.%m.%Y %H:%M')
        else:
            letter_date = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞'
        letter_text = convert_text(msg)
        message += f'üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {letter_date} \n'
        message += f'üìù –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:\n {letter_text}'
    logging.debug('–ü–∏—Å—å–º–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ.')
    return message


@bot.message_handler(commands=['start'])
def wake_up(message):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏."""
    chat_id = message.chat.id
    name = message.chat.first_name
    if is_valid_id(chat_id):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_check = types.KeyboardButton('/check')
        keyboard.add(button_check)
        send_message(MY_TELEGRAM_ID, f'–ü—Ä–∏–≤–µ—Ç, {name}.', keyboard)


@bot.message_handler(commands=['check'])
def check(message):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã."""
    global seen_uid_list
    chat_id = message.chat.id
    if is_valid_id(chat_id):
        try:
            send_message(MY_TELEGRAM_ID, '–ß–∏—Ç–∞—é –ø–æ—á—Ç—É...')
            imap = imap_connect()
            seen_uid_list = get_uid_list(imap)
            if len(seen_uid_list) == 0:
                send_message(MY_TELEGRAM_ID, '–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.')
            send_message(
                MY_TELEGRAM_ID,
                f'–£ —Ç–µ–±—è {len(seen_uid_list)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.'
            )
            for uid in seen_uid_list:
                message = read_email_message(uid, imap, True)
                keyboard = types.InlineKeyboardMarkup()
                btn_read = types.InlineKeyboardButton(
                    'üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å',
                    callback_data=f'read_{uid}'
                )
                keyboard.add(btn_read)
                send_message(
                    MY_TELEGRAM_ID,
                    message,
                    keyboard
                )
        except Exception as error:
            logging.error(f'–û—à–∏–±–∫–∞ –≤ check: {error}', exc_info=True)
            send_message(
                MY_TELEGRAM_ID,
                f'–û—à–∏–±–∫–∞ –≤ check: {error}'
            )
        finally:
            imap.logout()


@bot.callback_query_handler(func=lambda call: call.data.startswith("read_"))
def read_letter(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—á–∏—Ç–∞—Ç—å'."""
    global seen_uid_list
    try:
        letter_id = call.data.split('_')[1]
        imap = imap_connect()
        seen_uid_list.remove(letter_id)
        letter = read_email_message(letter_id, imap)
        send_message(MY_TELEGRAM_ID, letter)
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ read_letter: {error}', exc_info=True)
        send_message(
            MY_TELEGRAM_ID,
            f'–û—à–∏–±–∫–∞ –≤ read_letter: {error}'
        )
    finally:
        imap.logout()


def check_new_messages():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã."""
    global seen_uid_list
    while True:
        time.sleep(SLEEP)
        try:
            imap = imap_connect()
            new_uid_list = get_uid_list(imap)
            new_uid_list = list(set(new_uid_list) - set(seen_uid_list))
            if new_uid_list:
                send_message(
                    MY_TELEGRAM_ID,
                    f'üì© –£ –≤–∞—Å {len(new_uid_list)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'
                )
                for uid in new_uid_list:
                    seen_uid_list.append(uid)
                    message = read_email_message(uid, imap, True)
                    keyboard = types.InlineKeyboardMarkup()
                    btn_read = types.InlineKeyboardButton(
                        'üìñ –ü—Ä–æ—á–∏—Ç–∞—Ç—å',
                        callback_data=f'read_{uid}'
                    )
                    keyboard.add(btn_read)
                    send_message(
                        MY_TELEGRAM_ID,
                        message,
                        keyboard
                    )
        except Exception as error:
            logging.error(
                f'–û—à–∏–±–∫–∞ –≤ check_new_messages: {error}',
                exc_info=True
            )
            send_message(
                MY_TELEGRAM_ID,
                f'–û—à–∏–±–∫–∞ –≤ check_new_messages: {error}'
            )
        finally:
            imap.logout()


threading.Thread(target=check_new_messages, daemon=True).start()
bot.polling(interval=INTERVAL)
